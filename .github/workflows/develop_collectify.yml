# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy to Azure Web App - collectify

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # Set up Python for backend
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Set up Node.js for frontend
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
        
    # Set up Azure CLI
    - name: Set up Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Install backend dependencies
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Install frontend dependencies and build frontend
    - name: Install frontend dependencies and build
      run: |
        cd frontend
        npm ci
        # Create a production .env file with the correct API URL
        echo "REACT_APP_API_URL=/api" > .env.production
        npm run build

    # Create deployment package
    - name: Create deployment package
      run: |
        # Prepare deployment folder
        mkdir -p deployment
        
        # Copy backend files to deployment
        cp -r backend/* deployment/
        
        # Create static directories for frontend static files
        mkdir -p deployment/static/js
        mkdir -p deployment/static/css
        mkdir -p deployment/static/media
        
        # Copy built frontend to static directories
        cp -r frontend/build/* deployment/static/
        
        # Copy the startup script
        cp startup.sh deployment/
        chmod +x deployment/startup.sh
        
        # Create a .deployment file to tell Azure how to start the app
        echo '[config]
        command = bash ./startup.sh
        ' > deployment/.deployment
        
        # Modify app.py to serve static files if needed
        if grep -q "serve_static_files" deployment/app.py; then
          echo "Static file serving already configured"
        else
          # Append static file serving configuration to app.py
          echo "
        # Configure Flask to serve static files
        @app.route('/', defaults={'path': ''})
        @app.route('/<path:path>')
        def serve_static_files(path):
            if path.startswith('api/'):
                # Let Flask handle API routes
                return abort(404)
            
            # Check if file exists in static folder
            static_path = os.path.join(app.static_folder, path)
            if os.path.exists(static_path) and os.path.isfile(static_path):
                return send_from_directory(app.static_folder, path)
            
            # Serve index.html for all other routes (SPA support)
            return send_from_directory(app.static_folder, 'index.html')
        " >> deployment/app.py
        fi
        
        # Remove unnecessary files
        find deployment -type d -name "__pycache__" -exec rm -rf {} +
        find deployment -type d -name "node_modules" -exec rm -rf {} +
        rm -f deployment/Dockerfile*
        
        # Create zip file
        cd deployment
        zip -r ../collectify-deployment.zip .

    # Deploy to Azure Web App
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'collectify'
        # slot-name: 'production'
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_d7b87d5b242444a9bc2ab07fa9a62a6b }}
        package: './collectify-deployment.zip'
        
    # Configure app settings using direct Azure CLI commands
    - name: Configure App Settings with Azure CLI
      run: |
        az webapp config appsettings set --name collectify --resource-group collectify-rg --settings \
          FLASK_APP=app.py \
          FLASK_ENV=production \
          FLASK_RUN_HOST=0.0.0.0 \
          SCM_DO_BUILD_DURING_DEPLOYMENT=true \
          COLLECTIFY_DB_PATH=data/collectibles.db \
          WEBSITE_RUN_FROM_PACKAGE=0 \
          PYTHONPATH=/home/site/wwwroot \
          WEBSITE_HTTPLOGGING_RETENTION_DAYS=7 \
          STARTUP_COMMAND="gunicorn --bind=0.0.0.0:8000 --workers=4 app:app"