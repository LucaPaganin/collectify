# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy to Azure Web App - collectify

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # Set up Python for backend
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Set up Node.js for frontend
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    # Install backend dependencies
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Install frontend dependencies and build frontend
    - name: Install frontend dependencies and build
      run: |
        cd frontend
        npm ci
        # Create a production .env file with the correct API URL
        echo "REACT_APP_API_URL=/api" > .env.production
        npm run build

    # Create deployment package
    - name: Create deployment package
      run: |
        # Prepare deployment folder
        mkdir -p deployment
        
        # Copy backend files to deployment
        cp -r backend/* deployment/
        
        # Create static directories for frontend static files
        mkdir -p deployment/static/js
        mkdir -p deployment/static/css
        mkdir -p deployment/static/media
        
        # Copy built frontend to static directories
        cp -r frontend/build/* deployment/static/
        
        # Create a startup script that configures the application and initializes the database
        echo '#!/bin/bash
        # Find Python in the system
        PYTHON_PATH=$(which python3 || which python)
        if [ -z "$PYTHON_PATH" ]; then
          # Try common locations in Azure
          for path in /usr/bin/python3 /usr/bin/python /home/site/wwwroot/env/bin/python /opt/python/latest/bin/python
          do
            if [ -f "$path" ]; then
              PYTHON_PATH=$path
              break
            fi
          done
        fi
        
        # Find pip
        PIP_PATH=$(which pip3 || which pip)
        if [ -z "$PIP_PATH" ]; then
          # Try common locations
          for path in /usr/bin/pip3 /usr/bin/pip /home/site/wwwroot/env/bin/pip
          do
            if [ -f "$path" ]; then
              PIP_PATH=$path
              break
            fi
          done
        fi
        
        # Ensure Python is available
        if [ -z "$PYTHON_PATH" ]; then
          echo "Python not found. Installing Python 3..."
          apt-get update
          apt-get install -y python3 python3-pip
          PYTHON_PATH=$(which python3)
          PIP_PATH=$(which pip3)
        fi
        
        echo "Using Python at: $PYTHON_PATH"
        echo "Using pip at: $PIP_PATH"
        
        # Set up environment
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        export FLASK_APP=app.py
        export FLASK_ENV=production
        
        # Ensure dependencies are installed
        echo "Installing dependencies..."
        $PIP_PATH install -r requirements.txt
        
        # Initialize database
        echo "Initializing database..."
        $PYTHON_PATH init_all_tables.py
        
        # Start Gunicorn
        echo "Starting Gunicorn..."
        $PIP_PATH install gunicorn
        $PYTHON_PATH -m gunicorn --bind=0.0.0.0:${PORT:-8000} --workers=4 app:app
        ' > deployment/startup.sh
        chmod +x deployment/startup.sh
        
        # Create a .deployment file to tell Azure how to start the app
        echo '[config]
        command = bash ./startup.sh
        ' > deployment/.deployment
        
        # Create web.config file for Azure
        echo '<?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="PythonHandler" path="*" verb="*" modules="FastCgiModule" 
                   scriptProcessor="/opt/hostedtoolcache/Python/3.11.13/x64/bin/python.exe|%WSGI_PATH%" 
                   resourceType="Unspecified" requireAccess="Script" />
            </handlers>
            <rewrite>
              <rules>
                <rule name="Static Files" stopProcessing="true">
                  <match url="^(static|assets|js|css|media|favicon.ico)/(.*)" ignoreCase="true" />
                  <action type="Rewrite" url="static/{R:1}/{R:2}" />
                </rule>
                <rule name="API" stopProcessing="true">
                  <match url="^api/(.*)" ignoreCase="true" />
                  <action type="Rewrite" url="app.py/api/{R:1}" />
                </rule>
                <rule name="React Routes" stopProcessing="true">
                  <match url=".*" ignoreCase="true" />
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                    <add input="{REQUEST_URI}" pattern="^/api" negate="true" />
                  </conditions>
                  <action type="Rewrite" url="static/index.html" />
                </rule>
              </rules>
            </rewrite>
          </system.webServer>
        </configuration>' > deployment/web.config
        
        # Modify app.py to serve static files if needed
        if grep -q "serve_static_files" deployment/app.py; then
          echo "Static file serving already configured"
        else
          # Append static file serving configuration to app.py
          echo "
        # Configure Flask to serve static files
        @app.route('/', defaults={'path': ''})
        @app.route('/<path:path>')
        def serve_static_files(path):
            if path.startswith('api/'):
                # Let Flask handle API routes
                return abort(404)
            
            # Check if file exists in static folder
            static_path = os.path.join(app.static_folder, path)
            if os.path.exists(static_path) and os.path.isfile(static_path):
                return send_from_directory(app.static_folder, path)
            
            # Serve index.html for all other routes (SPA support)
            return send_from_directory(app.static_folder, 'index.html')
        " >> deployment/app.py
        fi
        
        # Remove unnecessary files
        find deployment -type d -name "__pycache__" -exec rm -rf {} +
        find deployment -type d -name "node_modules" -exec rm -rf {} +
        rm -f deployment/Dockerfile*
        
        # Create zip file
        cd deployment
        zip -r ../collectify-deployment.zip .

    # Deploy to Azure Web App
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'collectify'
        slot-name: 'production'
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_d7b87d5b242444a9bc2ab07fa9a62a6b }}
        package: './collectify-deployment.zip'
    
    # Configure app settings for the web app
    - name: Configure App Settings
      uses: azure/appservice-settings@v1
      with:
        app-name: 'collectify'
        slot-name: 'production'
        app-settings-json: |
          [
            {
              "name": "FLASK_APP",
              "value": "app.py"
            },
            {
              "name": "FLASK_ENV",
              "value": "production"
            },
            {
              "name": "FLASK_RUN_HOST",
              "value": "0.0.0.0"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true"
            },
            {
              "name": "COLLECTIFY_DB_PATH",
              "value": "data/collectibles.db"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0"
            },
            {
              "name": "PYTHON_PATH",
              "value": "/opt/hostedtoolcache/Python/3.11.13/x64/bin/python"
            },
            {
              "name": "PATH",
              "value": "/opt/hostedtoolcache/Python/3.11.13/x64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            }
          ]